{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashutosh verma\\\\Desktop\\\\CIX\\\\cix\\\\src\\\\panels\\\\Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles/Canvas.css'; // Assuming CSS is in this file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  zoomLevel,\n  setZoomLevel\n}) => {\n  _s();\n  // Default zoom level (100%)\n  const [zoomPercentage, setZoomPercentage] = useState(100); // Zoom percentage (100%)\n\n  useEffect(() => {\n    // Prevent zooming on the whole page\n    const preventZoom = e => {\n      if (e.touches && e.touches.length > 1 || e.ctrlKey) {\n        e.preventDefault(); // Prevent pinch-to-zoom or Ctrl+mouse-wheel zoom\n      }\n    };\n\n    // Add global event listeners to prevent zooming on the page\n    document.body.style.overflow = 'hidden'; // Disable scrolling to prevent zooming outside Canvas\n\n    //document.addEventListener('wheel', preventZoom, { passive: false }); // Prevent mouse wheel zoom\n    document.addEventListener('touchmove', preventZoom, {\n      passive: false\n    }); // Prevent pinch zoom\n\n    const canvasElement = document.querySelector('.canvasArea');\n    if (canvasElement) {\n      const handleZoom = e => {\n        e.preventDefault(); // Prevent the default scroll behavior\n\n        setZoomLevel(prevZoom => {\n          const newZoomLevel = e.deltaY < 0 ? Math.min(prevZoom + 0.1, 2) : Math.max(prevZoom - 0.1, 0.5);\n          console.log(\"Zoom Level:\", newZoomLevel); // Debug log to check the zoom level\n          setZoomPercentage(Math.round(newZoomLevel * 100));\n          return newZoomLevel;\n        });\n      };\n      canvasElement.addEventListener('wheel', handleZoom, {\n        passive: false\n      });\n\n      // Cleanup event listeners on component unmount\n      return () => {\n        document.removeEventListener('touchmove', preventZoom);\n        canvasElement.removeEventListener('wheel', handleZoom);\n      };\n    }\n  }, []);\n\n  // Zoom in function\n  const zoomIn = () => {\n    if (zoomLevel < 2) {\n      const newZoomLevel = zoomLevel + 0.1;\n      setZoomLevel(newZoomLevel);\n      setZoomPercentage(Math.round(newZoomLevel * 100));\n      console.log(\"Zoom In:\", newZoomLevel); // Debug log for zoom in\n    }\n  };\n\n  // Zoom out function\n  const zoomOut = () => {\n    if (zoomLevel > 0.5) {\n      const newZoomLevel = zoomLevel - 0.1;\n      setZoomLevel(newZoomLevel);\n      setZoomPercentage(Math.round(newZoomLevel * 100));\n      console.log(\"Zoom Out:\", newZoomLevel); // Debug log for zoom out\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvasContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvasArea\",\n      style: {\n        transform: `scale(${zoomLevel})`,\n        // Apply scaling\n        transformOrigin: 'top left',\n        // Keep zooming around the top-left corner\n        marginLeft: `calc(15% + 10px)` // Adjust for left pane width and margin\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvasContent\",\n        children: \"Main Content Area (Resizable and Scrollable)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"ZAXE/QFgFHYm4LTwaFODQH4G/6k=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Canvas","zoomLevel","setZoomLevel","_s","zoomPercentage","setZoomPercentage","preventZoom","e","touches","length","ctrlKey","preventDefault","document","body","style","overflow","addEventListener","passive","canvasElement","querySelector","handleZoom","prevZoom","newZoomLevel","deltaY","Math","min","max","console","log","round","removeEventListener","zoomIn","zoomOut","className","children","transform","transformOrigin","marginLeft","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ashutosh verma/Desktop/CIX/cix/src/panels/Canvas.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './styles/Canvas.css'; // Assuming CSS is in this file\r\n\r\nconst Canvas = ({zoomLevel,setZoomLevel}) => {\r\n// Default zoom level (100%)\r\n  const [zoomPercentage, setZoomPercentage] = useState(100); // Zoom percentage (100%)\r\n\r\n  useEffect(() => {\r\n    // Prevent zooming on the whole page\r\n    const preventZoom = (e) => {\r\n      if (e.touches && e.touches.length > 1 || e.ctrlKey) {\r\n        e.preventDefault(); // Prevent pinch-to-zoom or Ctrl+mouse-wheel zoom\r\n      }\r\n    };\r\n\r\n    // Add global event listeners to prevent zooming on the page\r\n    document.body.style.overflow = 'hidden'; // Disable scrolling to prevent zooming outside Canvas\r\n\r\n    //document.addEventListener('wheel', preventZoom, { passive: false }); // Prevent mouse wheel zoom\r\n    document.addEventListener('touchmove', preventZoom, { passive: false }); // Prevent pinch zoom\r\n\r\n    const canvasElement = document.querySelector('.canvasArea');\r\n    if (canvasElement) {\r\n      const handleZoom = (e) => {\r\n        e.preventDefault(); // Prevent the default scroll behavior\r\n\r\n        setZoomLevel((prevZoom) => {\r\n          const newZoomLevel =\r\n            e.deltaY < 0 ? Math.min(prevZoom + 0.1, 2) : Math.max(prevZoom - 0.1, 0.5);\r\n          console.log(\"Zoom Level:\", newZoomLevel); // Debug log to check the zoom level\r\n          setZoomPercentage(Math.round(newZoomLevel * 100));\r\n          return newZoomLevel;\r\n        });\r\n      };\r\n\r\n      canvasElement.addEventListener('wheel', handleZoom, { passive: false });\r\n\r\n      // Cleanup event listeners on component unmount\r\n      return () => {\r\n        document.removeEventListener('touchmove', preventZoom);\r\n        canvasElement.removeEventListener('wheel', handleZoom);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // Zoom in function\r\n  const zoomIn = () => {\r\n    if (zoomLevel < 2) {\r\n      const newZoomLevel = zoomLevel + 0.1;\r\n      setZoomLevel(newZoomLevel);\r\n      setZoomPercentage(Math.round(newZoomLevel * 100));\r\n      console.log(\"Zoom In:\", newZoomLevel); // Debug log for zoom in\r\n    }\r\n  };\r\n\r\n  // Zoom out function\r\n  const zoomOut = () => {\r\n    if (zoomLevel > 0.5) {\r\n      const newZoomLevel = zoomLevel - 0.1;\r\n      setZoomLevel(newZoomLevel);\r\n      setZoomPercentage(Math.round(newZoomLevel * 100));\r\n      console.log(\"Zoom Out:\", newZoomLevel); // Debug log for zoom out\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"canvasContainer\">\r\n      <div\r\n        className=\"canvasArea\"\r\n        style={{\r\n          transform: `scale(${zoomLevel})`, // Apply scaling\r\n          transformOrigin: 'top left', // Keep zooming around the top-left corner\r\n          marginLeft: `calc(15% + 10px)`, // Adjust for left pane width and margin\r\n        }}\r\n      >\r\n        <div className=\"canvasContent\">\r\n          Main Content Area (Resizable and Scrollable)\r\n        </div>\r\n      </div>\r\n\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}